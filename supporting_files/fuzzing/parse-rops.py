#!/usr/bin/python3
from sys import *

gadgets: dict = {
    "add eax, 0x10": 0x0000178a,
    "add eax, 0x20": 0x0000179e,
    "add eax, 0x24": 0x000017a2,
    "add eax, 0x3c": 0x000017a6,
    "add eax, 1": 0x0000179a,
    "add eax, 4": 0x000017aa,
    "add eax, 8": 0x000017b2,
    "add eax, ebx": 0x000017b6,
    "add eax, esi": 0x000017bc,
    "add ebx, 0xc": 0x000017d3,
    "add ebx, 8": 0x000017db,
    "add ecx, 0x10": 0x000017df,
    "add ecx, 0x14": 0x000017e3,
    "add ecx, 0x24": 0x000017f3,
    "add ecx, 0x28": 0x000017f7,
    "add ecx, 4": 0x000017ff,
    "add ecx, eax": 0x00001807,
    "add edi, eax": 0x00001810,
    "add esp, 0x3c": 0x0000253e,
    "cld": 0x00001317,
    "cmove edi, esi": 0x00001871,
    "cmp eax, dword ptr [ebp + 0x28]": 0x00001898,
    "cmp eax, ecx": 0x000018b0,
    "mov dword ptr [ebp + 0x10], eax": 0x00001911,
    "mov dword ptr [ebp + 0x14], eax": 0x00001919,
    "mov dword ptr [ebp + 0x18], eax": 0x0000191d,
    "mov dword ptr [ebp + 0x1c], eax": 0x00001925,
    "mov dword ptr [ebp + 0x20], eax": 0x00001929,
    "mov dword ptr [ebp + 0x24], eax": 0x00001931,
    "mov dword ptr [ebp + 0x28], eax": 0x00001935,
    "mov dword ptr [ebp + 0x30], eax": 0x00001939,
    "mov dword ptr [ebp + 0xc], eax": 0x00001941,
    "mov dword ptr [ebp + 4], eax": 0x00001945,
    "mov dword ptr [ebp + 8], eax": 0x00001949,
    "mov dword ptr [ebp + eax], esp": 0x0000194d,
    "mov dword ptr [ebp + ecx], eax": 0x00001952,
    "mov dword ptr [ebp - 0x10], eax": 0x00001915,
    "mov dword ptr [ebp - 0x18], eax": 0x00001921,
    "mov dword ptr [ebp - 0x20], eax": 0x0000192d,
    "mov dword ptr [ebp - 0x30], eax": 0x0000193d,
    "mov ax, word ptr [ecx]": 0x000018d7,
    "mov eax, dword ptr [eax + 0x14]": 0x000019b1,
    "mov eax, dword ptr [eax + 0x1c]": 0x000019b5,
    "mov eax, dword ptr [eax + 0x78]": 0x000019b9,
    "mov eax, dword ptr [eax + ebx]": 0x000019bd,
    "mov eax, dword ptr [eax + ecx*4]": 0x000019c1,
    "mov eax, dword ptr [eax]": 0x000019d5,
    "mov eax, dword ptr [ebp + 0x10]": 0x000019d8,
    "mov eax, dword ptr [ebp + 0x14]": 0x000019dc,
    "mov eax, dword ptr [ebp + 0x18]": 0x000019e0,
    "mov eax, dword ptr [ebp + 0x1c]": 0x000019e4,
    "mov eax, dword ptr [ebp + 0x20]": 0x000019e8,
    "mov eax, dword ptr [ebp + 0x24]": 0x000019ec,
    "mov eax, dword ptr [ebp + 0x28]": 0x000019f0,
    "mov eax, dword ptr [ebp + 0xc]": 0x000019f4,
    "mov eax, dword ptr [ebp + 4]": 0x000019f8,
    "mov eax, dword ptr [ebp + 8]": 0x000019fc,
    "mov eax, dword ptr [ecx + 0x3c]": 0x00001a09,
    "mov eax, dword ptr [ecx]": 0x000018d8,
    "mov eax, dword ptr fs:[0x30]": 0x00001a51,
    "mov eax, ebp": 0x00001a5c,
    "mov eax, ebx": 0x00001a5f,
    "mov eax, esi": 0x00001a6b,
    "mov eax, esp": 0x00001a6e,
    "mov ecx, dword ptr [ecx + eax*4]": 0x00001a88,
    "mov ecx, eax": 0x000018f7,
    "mov ecx, esp": 0x00001a8c,
    "mov esp, eax": 0x00001a92,
    "mov esp, edi": 0x00001a9b,
    "pop eax": 0x00001aae,
    "nop": 0x000019cf,
    "sub eax, 1": 0x00001b44,
    "sub ebx, 4": 0x00001b52,
    "xchg eax, ebx": 0x00001b9d,
    "xchg eax, ecx": 0x00001b9f,
    "xchg eax, edx": 0x00001ba1,
    "xchg eax, esi": 0x00001bb4,
    "xchg ebp, ecx": 0x00001ba5,
    "xchg edx, ecx": 0x00001bb1,
    "xchg esi, edi": 0x00001bb9,
    "xor eax, 0xffffffff": 0x00001bcc,
    "xor eax, eax": 0x00001bd0,
    "xor edi, edi": 0x00001bc9,
    "int 3": 0x000018c4,
}


def checkGadget(gadget: str = ""):
    for key in gadgets.keys():
        if f" : {key} ; ret" in gadget:
            _ = [
                print(f"Warning, bad char: {gadget}")
                for char in ["00", "0a", "0d"]
                if f"{char} : " in gadget
            ]
            return True
    return False


def parseFile(rop: str = "win-server.rop"):
    data, results, matched = open(rop, "r").read(), [], []
    for line in data.split("\n"):
        if "0x" not in line[:3]:
            continue
        if not checkGadget(line):
            continue
        (offset, gadget) = line.split(" : ")
        matched.append(gadget.rstrip(" ; ret"))
        results.append('"%s": %s,' % (gadget.rstrip(" ; ret"), offset.strip()))
    [print(f"missing: {key}") for key in gadgets.keys() if key not in matched]
    open("gadgets.out", "w").write("\n".join(results))
    print("results saved to gadgets.out")


if __name__ == '__main__':
    parseFile(argv[1])

# python parse-rops.py win-server.rop