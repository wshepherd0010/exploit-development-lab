class LabSetup
{
  static [String]$Title="Exploit Development Lab: Buffer Overflows";
  static [String]$Flag="C:\Windows\Temp\.setup-complete";
  [System.Net.WebClient]$WebClient=$null;
  [String]$ProxyServer="";
  [String]$ProxyUser="";
  [String]$ProxyPassword="";
  [Boolean]$Verbose=$true;
  [Boolean]$Raise=$true;
  LabSetup($settings){
    $this.WebClient = $null;
    $this.ProxyServer = "";
    $this.ProxyUser = "";
    $this.ProxyPassword = "";
    $this.Verbose = $true;
    $this.Raise = $true;
    $this.LoadSettings($settings);
  }
  static [LabSetup]Factory($settings){
    return [LabSetup]::new($settings);
  }
  [LabSetup]LoadSettings($settings){
    $settings.keys|%{
      $this."$_" = $settings."$_";
    }
    return $this;
  }
  [LabSetup]Info([String]$message){
    echo "INFO ($([DateTime]::Now)): $message";
    return $this;
  }
  [LabSetup]Error([System.Exception]$error){
    echo "ERROR ($([DateTime]::Now)): $($error.Message)";
    if ($this.Raise){
      throw $error;
    }
    return $this;
  }
  [LabSetup]Debug([String]$message){
    if ($this.Verbose){
      echo "DEBUG ($([DateTime]::Now)): $message";
    }
    return $this;
  }
  [LabSetup]SetWebClient(){
    try {
      $this.WebClient = [System.Net.WebClient]::new();
      if ($this.ProxyServer) {
        return $this.SetProxyServer();
      }
    } catch {
      $this.Error($_);
    }
    return $this;
  }
  [LabSetup]SetProxyServer(){
    if (!$this.ProxyServer){
      return $this;
    }
    try {
      $this.WebClient.Proxy = [System.Net.WebProxy]::new();
      $this.WebClient.Proxy.Address = $this.ProxyServer;
      if (!($this.ProxyUser -and $this.ProxyPassword)){
        return $this;
      }
      $this.WebClient.Proxy.Credentials = [System.Net.NetworkCredential]::new(
        $this.ProxyUser,
        [Runtime.InteropServices.Marshal]::PtrToStringAuto(
          [Runtime.InteropServices.Marshal]::SecureStringToBSTR(
            $this.ProxyPassword
          )
        ),
        ""
      );
    } catch {
      $this.Error($_);
    }
    return $this;
  }
  [Boolean]Exists([String]$path){
    return Test-Path -PathType Leaf $path;
  }
  [LabSetup]Link([String]$source, [String]$destination){
    try {
      if (!$this.Exists($source)){
        $this.Info("Missing source: $source");
        return $this;
      }
      if ($this.Exists($destination)){
        $this.Info("Link exists: $destination");
        return $this;
      }
      New-Item -Path $destination -Type SymbolicLink -Value $source;
    } catch {
      $this.Error($_);
    }
    return $this;
  }
  [LabSetup]Shortcut([String]$source, [String]$link, [String]$arguments){
    try {
      if (!$this.Exists($source)){
        $this.Info("Missing source: $source");
        return $this;
      }
      if ($this.Exists($link)){
        $this.Info("Shortcut exists: $link");
        return $this;
      }
      $shortcut = (New-Object -ComObject WScript.Shell).CreateShortcut($link);
      $shortcut.TargetPath = $source;
      if ($arguments){
        $shortcut.Arguments = $arguments;
      }
      $shortcut.Save();
    } catch {
      $this.Error($_);
    }
    return $this;
  }
  [LabSetup]DownloadFile([String]$url, [String]$destination){
    try {
      if ($this.Exists($destination)){
        $this.Info("File exists: $destination");
        return $this;
      }
      $this.WebClient.DownloadFile($url, $destination);
    } catch {
      $this.Error($_);
    }
    return $this;
  }
  [String]DownloadString([String]$url){
    try {
      return $this.WebClient.DownloadString($url);
    } catch {
      $this.Error($_);
    }
    return "";
  }
  [LabSetup]Setup(){
    try {
      $this.Info("Running Setup: $([LabSetup]::Title)");
      $url = "https://github.com/wshepherd0010/exploit-development-lab/raw/master/setup";
      $desktop = [System.Environment]::GetFolderPath("CommonDesktopDirectory");
      $sys = [System.Environment]::SystemDirectory;

      if ($this.Exists([LabSetup]::Flag)){
        return $this.Info("Lab already setup, exiting");
      }
      $this.Debug("Setting up environment");
      $this.SetWebClient();

      if (!$this.Exists("$sys\win-server.exe")){
        $this.Info("Downloading vulnerable server");
        $this.DownloadFile("$url/win-server.exe", "$sys\win-server.exe");
        $this.Shortcut(
          "$sys\win-server.exe", 
          "$desktop\win-server.lnk", 
          $null
        );
      }
      if (!$this.Exists("$sys/cdb.exe")){
        $this.Info("Downloading debugger");
        $this.DownloadFile("$url/cdb.exe", "$sys\cdb.exe");
        $this.Shortcut(
          "$sys\cdb.exe", 
          "$desktop\cdb.lnk", 
          $null
        );
      }
      if (!$this.Exists("$desktop\debug.lnk")){
        $this.Info("Creating debugger shortcut");
        $this.Shortcut(
          "$sys\cdb.exe", 
          "$desktop\debugger.lnk", 
          '-pn win-server.exe -pd -c "g"'
        );
      }
      $this.Info("Setting up firewall rules");
      foreach ($port in @(65534, 65534, 4444, 80, 443)){
        foreach ($direction in @("in", "out")){
          netsh advfirewall firewall add rule name="TCP $port" dir=$direction `
            action=allow protocol=TCP localport=$port
        }
      }
      "$([DateTime]::Now)"|Out-File -Encoding ASCII -FilePath [LabSetup]::Flag;
      $this.Info("Setup complete");
    } catch {
      $this.Error($_);
    }
    return $this;
  }
};
#$client = [LabSetup]::Factory(@{
#  ProxyServer="http://192.168.243.133:8080";
#  ProxyUser="proxyuser";
#  ProxyPassword="proxypassword";
#  Verbose=$true;
#  Raise=$true;
#});
#$client.Setup();